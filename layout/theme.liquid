<!doctype html>
<html class="js" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="">
    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    <title>
      {{ page_title }}
      {%- if current_tags %} &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
      {%- if current_page != 1 %} &ndash; Page {{ current_page }}{% endif -%}
      {%- unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless -%}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    {% render 'meta-tags' %}

    {{ content_for_header }}

    {{ 'styles.css' | asset_url | stylesheet_tag }}
    
    <style>
      @font-face {
        font-family: 'BannerType2';
        src: url('{{ "bannertype2.woff" | asset_url }}') format('woff');
        font-weight: normal;
        font-style: normal;
      }

      @font-face {
        font-family: 'p22_mackinac_probold';
        src: url('{{ "mackinac-bold-webfont.woff2" | asset_url }}') format('woff2'),
             url('{{ "mackinac-bold-webfont.woff" | asset_url }}') format('woff');
        font-weight: normal;
        font-style: normal;
      }

      @font-face {
        font-family: 'Rubik';
        src: url('{{ "Rubik-Regular.woff2" | asset_url }}') format('woff2'),
             url('{{ "Rubik-Regular.woff" | asset_url }}') format('woff');
        font-weight: normal;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: 'Rubik';
        src: url('{{ "Rubik-Bold.woff2" | asset_url }}') format('woff2'),
             url('{{ "Rubik-Bold.woff" | asset_url }}') format('woff');
        font-weight: bold;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: 'Rubik';
        src: url('{{ "Rubik-Medium.woff2" | asset_url }}') format('woff2'),
             url('{{ "Rubik-Medium.woff" | asset_url }}') format('woff');
        font-weight: 500;
        font-style: normal;
        font-display: swap;
      }
    </style>

    <script src="https://unpkg.com/vue@3/dist/vue.global.js" defer></script>

    <script defer>
      if (Shopify.designMode) {
        document.documentElement.classList.add('shopify-design-mode');
      }
    </script>

    <link rel="preconnect" href="https://cdn.shopify.com">
    <link rel="icon" type="image/png" href="{{ "favicon.png" | asset_url }}">
    <link rel="apple-touch-icon" href="{{ "favicon.png" | asset_url }}">
  </head>
  <body>
    {{ content_for_layout }}

    <div class="cart-overlay" onclick="closeCartDrawer()"></div>
    {% section 'cart-drawer' %}

    <script defer>
      function updateCartCount(count) {
        // Update all cart count displays
        const cartCounts = document.querySelectorAll('.cart-count');
        cartCounts.forEach(el => {
          el.textContent = count;
        });
        
        // Show/hide the cart badge based on count
        const cartButton = document.querySelector('.cart-toggle');
        const cartBadge = document.querySelector('.cart-count-badge');
        
        if (count > 0) {
          // If badge doesn't exist but we have items, create it
          if (!cartBadge && cartButton) {
            const newBadge = document.createElement('span');
            newBadge.className = 'bg-bamboo-beige text-peanut-brown font-bold px-2.5 py-1 rounded-full min-w-[28px] text-center text-sm ml-1 cart-count-badge';
            newBadge.innerHTML = `<span class="cart-count">${count}</span>`;
            cartButton.appendChild(newBadge);
          }
        } else {
          // If count is 0, remove the badge
          if (cartBadge) {
            cartBadge.remove();
          }
        }
      }

      function openCartDrawer() {
        document.getElementById('cart-drawer').classList.add('open');
        document.querySelector('.cart-overlay').classList.add('open');
        document.body.style.overflow = 'hidden';
      }

      function closeCartDrawer() {
        document.getElementById('cart-drawer').classList.remove('open');
        document.querySelector('.cart-overlay').classList.remove('open');
        document.body.style.overflow = '';
      }

      function removeItem(line) {
        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            line: line,
            quantity: 0,
          }),
        })
          .then((response) => response.json())
          .then((cart) => {
            updateCartDrawer(cart);

            // Update cart count
            updateCartCount(cart.item_count);
          })
          .catch((error) => {
            console.error('Error removing item:', error);
          });
      }

      function updateQuantity(line, quantity) {
        return fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            line: line,
            quantity: quantity,
          }),
        })
          .then((response) => response.json())
          .then((cart) => {
            // Instead of refreshing the entire cart drawer, just update the necessary elements
            updateCartWithoutRefresh(cart, line, quantity);

            // Update cart count
            updateCartCount(cart.item_count);

            return cart;
          })
          .catch((error) => {
            console.error('Error updating quantity:', error);
            throw error;
          });
      }

      function updateCartWithoutRefresh(cart, line, quantity) {
        // Update subtotal
        const subtotalElements = document.querySelectorAll('.cart-footer .font-medium:last-child');
        if (subtotalElements.length > 0) {
          subtotalElements.forEach((element) => {
            element.textContent = formatMoney(cart.total_price);
          });
        }

        // If the line item price has changed (due to quantity), update it
        if (quantity > 0) {
          const cartItem = document.querySelector(`.cart-item[data-line="${line}"]`);
          if (cartItem && cart.items && cart.items[line - 1]) {
            // Update line item price if it exists
            const lineItemPrice = cartItem.querySelector('.flex-1 .flex .text-peanut-brown:last-child');
            if (lineItemPrice) {
              const item = cart.items[line - 1];
              const linePrice = item.price * item.quantity;
              lineItemPrice.textContent = formatMoney(linePrice);
            }
          }
        }

        // If quantity is 0, remove the item from the cart drawer
        if (quantity === 0) {
          const cartItem = document.querySelector(`.cart-item[data-line="${line}"]`);
          if (cartItem) {
            // Animate the removal
            cartItem.style.transition = 'opacity 0.3s, height 0.3s';
            cartItem.style.opacity = '0';
            cartItem.style.height = '0';
            cartItem.style.overflow = 'hidden';

            // Remove after animation completes
            setTimeout(() => {
              cartItem.remove();

              // Renumber the data-line attributes
              const cartItems = document.querySelectorAll('.cart-item');
              cartItems.forEach((item, index) => {
                item.setAttribute('data-line', index + 1);

                // Update data-line attributes on buttons and inputs inside this item
                const buttons = item.querySelectorAll('button[data-line], input[data-line]');
                buttons.forEach((el) => {
                  el.setAttribute('data-line', index + 1);
                });
              });
            }, 300);
          }

          // If cart is empty, refresh the drawer completely
          if (cart.item_count === 0) {
            setTimeout(() => {
              updateCartDrawer(cart);
            }, 300);
          }
        }

        // Check if cart is empty, hide/show elements accordingly
        if (cart.item_count === 0) {
          const cartItems = document.querySelector('.cart-items');
          const cartFooter = document.querySelector('.cart-footer');
          const emptyCartMessage = document.querySelector('.cart-drawer-content .flex-1.flex.flex-col');

          if (cartItems) cartItems.style.display = 'none';
          if (cartFooter) cartFooter.style.display = 'none';
          if (emptyCartMessage) emptyCartMessage.style.display = 'flex';
        }
      }

      function formatMoney(cents) {
        // Standardized money formatting for EUR
        const currencySymbol = 'â‚¬';

        if (typeof cents === 'string') {
          cents = cents.replace('.', '');
        }
        
        let value = parseInt(cents || 0, 10);
        if (isNaN(value)) {
          console.error('Invalid price value:', cents);
          value = 0;
        }
        
        const euros = Math.floor(value / 100);
        const cents_part = (value % 100).toString().padStart(2, '0');
        return `${currencySymbol}${euros},${cents_part}`;
      }

      function updateCartDrawer(cart) {
        fetch('/?sections=cart-drawer')
          .then((response) => response.json())
          .then((sections) => {
            const cartDrawerContent = document.getElementById('cart-drawer-content');
            // Create a temporary div to parse the HTML
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = sections['cart-drawer'];

            // Find the cart drawer content in the parsed HTML
            const newCartContent = tempDiv.querySelector('#cart-drawer-content');

            // Replace the old content with the new content
            if (newCartContent && cartDrawerContent) {
              cartDrawerContent.innerHTML = newCartContent.innerHTML;

              // Scroll the cart items to the top
              const cartItems = cartDrawerContent.querySelector('.cart-items');
              if (cartItems) {
                cartItems.scrollTop = 0;
              }

              // Add data-line attributes to cart items for easier selection
              const cartItemElements = cartDrawerContent.querySelectorAll('.cart-item');
              cartItemElements.forEach((item, index) => {
                item.setAttribute('data-line', index + 1);
              });
              
              // Re-attach event listeners for quantity controls after updating content
              attachQuantityControlListeners();
            }
          })
          .catch((error) => {
            console.error('Error updating cart:', error);
          });
      }

      // Function to attach event listeners for quantity controls
      function attachQuantityControlListeners() {
        // Remove old listeners and attach new ones using event delegation
        const cartDrawer = document.getElementById('cart-drawer');
        if (!cartDrawer) return;
        
        // Use event delegation for better performance
        cartDrawer.addEventListener('click', handleQuantityControlClick);
      }
      
      function handleQuantityControlClick(event) {
        // Handle quantity decrease button
        if (event.target.classList.contains('quantity-decrease') || event.target.closest('.quantity-decrease')) {
          const button = event.target.classList.contains('quantity-decrease')
            ? event.target
            : event.target.closest('.quantity-decrease');

          // Prevent double-clicks
          if (button.disabled) return;
          button.disabled = true;

          const line = parseInt(button.getAttribute('data-line'));
          const input = button.nextElementSibling;
          const currentValue = parseInt(input.value);

          if (currentValue > 1) {
            // Give immediate visual feedback
            const newValue = currentValue - 1;
            input.value = newValue;

            // Show loading state
            button.classList.add('opacity-50');

            // Make the update
            updateQuantity(line, newValue).finally(() => {
              // Re-enable button
              button.disabled = false;
              button.classList.remove('opacity-50');
            });
          } else if (currentValue === 1) {
            // Show loading state
            button.classList.add('opacity-50');

            // Remove item
            input.value = 0;
            updateQuantity(line, 0).finally(() => {
              // Re-enable button (though it will be removed from DOM)
              button.disabled = false;
              button.classList.remove('opacity-50');
            });
          }
        }

        // Handle quantity increase button
        if (event.target.classList.contains('quantity-increase') || event.target.closest('.quantity-increase')) {
          const button = event.target.classList.contains('quantity-increase')
            ? event.target
            : event.target.closest('.quantity-increase');

          // Prevent double-clicks
          if (button.disabled) return;
          button.disabled = true;

          const line = parseInt(button.getAttribute('data-line'));
          const input = button.previousElementSibling;
          const currentValue = parseInt(input.value);

          // Give immediate visual feedback
          const newValue = currentValue + 1;
          input.value = newValue;

          // Show loading state
          button.classList.add('opacity-50');

          // Make the update
          updateQuantity(line, newValue).finally(() => {
            // Re-enable button
            button.disabled = false;
            button.classList.remove('opacity-50');
          });
        }
      }
      
      // Initialize quantity control listeners on page load
      document.addEventListener('DOMContentLoaded', function() {
        attachQuantityControlListeners();
      });

      // Handle input changes directly
      document.addEventListener('change', function (event) {
        if (
          event.target.hasAttribute('data-line') &&
          event.target.hasAttribute('name') &&
          event.target.name === 'updates[]'
        ) {
          const line = parseInt(event.target.getAttribute('data-line'));
          const quantity = parseInt(event.target.value);

          if (!isNaN(line) && !isNaN(quantity) && quantity >= 0) {
            updateQuantity(line, quantity);
          }
        }
      });

      // Intercept all add-to-cart form submissions
      document.addEventListener('DOMContentLoaded', function () {
        // Find all forms that submit to /cart/add
        const addToCartForms = document.querySelectorAll('form[action="/cart/add"]');

        addToCartForms.forEach((form) => {
          form.addEventListener('submit', function (e) {
            e.preventDefault(); // Stop the form from submitting normally

            // Create form data
            const formData = new FormData(form);

            // Convert FormData to JSON
            const formDataJson = {};
            formData.forEach((value, key) => {
              formDataJson[key] = value;
            });

            // Prepare the request body
            const requestBody = {
              items: [
                {
                  id: formDataJson['id'],
                  quantity: formDataJson['quantity'] || 1,
                  properties: {},
                },
              ],
            };

            // Add any line item properties if they exist
            for (const [key, value] of Object.entries(formDataJson)) {
              if (key.startsWith('properties[') && key.endsWith(']')) {
                const propName = key.slice(11, -1); // Extract property name
                requestBody.items[0].properties[propName] = value;
              }
            }

            // Send the AJAX request
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestBody),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.status) {
                  console.error('Error:', data.description);
                  return;
                }

                // Get updated cart data
                return fetch('/cart.js');
              })
              .then((response) => response.json())
              .then((cart) => {
                // Update cart count - this will also handle badge visibility
                updateCartCount(cart.item_count);

                // Update the cart drawer
                updateCartDrawer(cart);

                // Open the cart drawer
                openCartDrawer();
              })
              .catch((error) => {
                console.error('Error adding item to cart:', error);
                // Fall back to normal form submission if AJAX fails
                form.submit();
              });
          });
        });
      });

      // Listen for cart:added events if you're using the Shopify AJAX API
      document.addEventListener('cart:added', function (event) {
        openCartDrawer();
        updateCartDrawer();
      });

      // Handle quick add buttons and dynamically added add-to-cart buttons
      document.addEventListener('click', function (e) {
        // Check if the clicked element is a quick add button or has a data-add-to-cart attribute
        if (
          e.target.matches('[data-add-to-cart]') ||
          e.target.matches('.quick-add') ||
          e.target.closest('[data-add-to-cart]') ||
          e.target.closest('.quick-add')
        ) {
          const button = e.target.matches('[data-add-to-cart], .quick-add')
            ? e.target
            : e.target.closest('[data-add-to-cart], .quick-add');

          // Check if this button should be intercepted (some buttons might be part of a form that we already handle)
          if (button.closest('form[action="/cart/add"]')) {
            return; // This button is inside a form we're already handling
          }

          e.preventDefault();

          // Get variant ID either from the button's data attribute or from a nearby select/input
          let variantId = button.dataset.variantId || button.value;

          // If variant ID is not on the button, look for a nearby variant selector
          if (!variantId) {
            const container = button.closest('.product-form') || button.closest('.product') || button.parentElement;
            const variantSelect = container.querySelector('select[name="id"]');
            const variantInput = container.querySelector('input[name="id"]');

            if (variantSelect) {
              variantId = variantSelect.value;
            } else if (variantInput) {
              variantId = variantInput.value;
            }
          }

          if (!variantId) {
            console.error('Could not find variant ID for quick add');
            return;
          }

          // Get quantity
          let quantity = 1;
          const container = button.closest('.product-form') || button.closest('.product') || button.parentElement;
          const quantityInput = container.querySelector('input[name="quantity"]');

          if (quantityInput) {
            quantity = parseInt(quantityInput.value) || 1;
          }

          // Add to cart using AJAX
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [
                {
                  id: variantId,
                  quantity: quantity,
                },
              ],
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.status) {
                console.error('Error:', data.description);
                return;
              }

              // Get updated cart data
              return fetch('/cart.js');
            })
            .then((response) => response.json())
            .then((cart) => {
              // Update cart count
              updateCartCount(cart.item_count);

              // Update the cart drawer
              updateCartDrawer(cart);

              // Open the cart drawer
              openCartDrawer();
            })
            .catch((error) => {
              console.error('Error adding item to cart:', error);
            });
        }
      });

      // Close cart drawer when clicking on the overlay
      document.querySelector('.cart-overlay').addEventListener('click', closeCartDrawer);

      // Define smoothScroll function globally before it's used
      window.smoothScroll = function(element) {
        const targetElement = document.querySelector(element);
        if (targetElement) {
          const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
          window.scrollTo({
            top: elementPosition - 200,
            behavior: 'smooth',
          });
        }
      }

      document.addEventListener('DOMContentLoaded', function () {
        const headerSection = document.querySelector('div[id^="shopify-section-"][id$="__header"]');
        if (headerSection) {
          headerSection.classList.add('sticky', 'top-0', 'bg-[#FFF2DC]', 'z-50');
        }
      });

      // Handle "Buy Now" buttons
      document.addEventListener('click', function (e) {
        // Check if the clicked element is a "buy now" button
        if (
          e.target.matches('[data-buy-now]') ||
          e.target.matches('.buy-now') ||
          e.target.closest('[data-buy-now]') ||
          e.target.closest('.buy-now')
        ) {
          const button = e.target.matches('[data-buy-now], .buy-now')
            ? e.target
            : e.target.closest('[data-buy-now], .buy-now');

          // Don't intercept if inside a form we're already handling
          if (button.closest('form[action="/cart/add"]')) {
            return;
          }

          e.preventDefault();

          // Get variant ID
          let variantId = button.dataset.variantId || button.value;

          if (!variantId) {
            const container = button.closest('.product-form') || button.closest('.product') || button.parentElement;
            const variantSelect = container.querySelector('select[name="id"]');
            const variantInput = container.querySelector('input[name="id"]');

            if (variantSelect) {
              variantId = variantSelect.value;
            } else if (variantInput) {
              variantId = variantInput.value;
            }
          }

          if (!variantId) {
            console.error('Could not find variant ID for buy now button');
            return;
          }

          // Get quantity
          let quantity = 1;
          const container = button.closest('.product-form') || button.closest('.product') || button.parentElement;
          const quantityInput = container.querySelector('input[name="quantity"]');

          if (quantityInput) {
            quantity = parseInt(quantityInput.value) || 1;
          }

          // Add to cart using AJAX
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [
                {
                  id: variantId,
                  quantity: quantity,
                },
              ],
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.status) {
                console.error('Error:', data.description);
                return;
              }

              // Get updated cart data
              return fetch('/cart.js');
            })
            .then((response) => response.json())
            .then((cart) => {
              // Update cart count
              updateCartCount(cart.item_count);

              // Update the cart drawer
              updateCartDrawer(cart);

              // Open the cart drawer
              openCartDrawer();
            })
            .catch((error) => {
              console.error('Error adding item to cart:', error);
            });
        }
      });
    </script>
  </body>
</html>
